import {
  __commonJS
} from "./chunk-BUSYA2B4.js";

// node_modules/tingle.js/dist/tingle.min.js
var require_tingle_min = __commonJS({
  "node_modules/tingle.js/dist/tingle.min.js"(exports, module) {
    !function(t, o) {
      "function" == typeof define && define.amd ? define(o) : "object" == typeof exports ? module.exports = o() : t.tingle = o();
    }(exports, function() {
      var o = false;
      function t(t2) {
        this.opts = function() {
          for (var t3 = 1; t3 < arguments.length; t3++) for (var o2 in arguments[t3]) arguments[t3].hasOwnProperty(o2) && (arguments[0][o2] = arguments[t3][o2]);
          return arguments[0];
        }({}, { onClose: null, onOpen: null, beforeOpen: null, beforeClose: null, stickyFooter: false, footer: false, cssClass: [], closeLabel: "Close", closeMethods: ["overlay", "button", "escape"] }, t2), this.init();
      }
      function e() {
        this.modalBoxFooter && (this.modalBoxFooter.style.width = this.modalBox.clientWidth + "px", this.modalBoxFooter.style.left = this.modalBox.offsetLeft + "px");
      }
      return t.prototype.init = function() {
        if (!this.modal) return (function() {
          this.modal = document.createElement("div"), this.modal.classList.add("tingle-modal"), 0 !== this.opts.closeMethods.length && -1 !== this.opts.closeMethods.indexOf("overlay") || this.modal.classList.add("tingle-modal--noOverlayClose");
          this.modal.style.display = "none", this.opts.cssClass.forEach(function(t2) {
            "string" == typeof t2 && this.modal.classList.add(t2);
          }, this), -1 !== this.opts.closeMethods.indexOf("button") && (this.modalCloseBtn = document.createElement("button"), this.modalCloseBtn.type = "button", this.modalCloseBtn.classList.add("tingle-modal__close"), this.modalCloseBtnIcon = document.createElement("span"), this.modalCloseBtnIcon.classList.add("tingle-modal__closeIcon"), this.modalCloseBtnIcon.innerHTML = '<svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg"><path d="M.3 9.7c.2.2.4.3.7.3.3 0 .5-.1.7-.3L5 6.4l3.3 3.3c.2.2.5.3.7.3.2 0 .5-.1.7-.3.4-.4.4-1 0-1.4L6.4 5l3.3-3.3c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L5 3.6 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4L3.6 5 .3 8.3c-.4.4-.4 1 0 1.4z" fill="#000" fill-rule="nonzero"/></svg>', this.modalCloseBtnLabel = document.createElement("span"), this.modalCloseBtnLabel.classList.add("tingle-modal__closeLabel"), this.modalCloseBtnLabel.innerHTML = this.opts.closeLabel, this.modalCloseBtn.appendChild(this.modalCloseBtnIcon), this.modalCloseBtn.appendChild(this.modalCloseBtnLabel));
          this.modalBox = document.createElement("div"), this.modalBox.classList.add("tingle-modal-box"), this.modalBoxContent = document.createElement("div"), this.modalBoxContent.classList.add("tingle-modal-box__content"), this.modalBox.appendChild(this.modalBoxContent), -1 !== this.opts.closeMethods.indexOf("button") && this.modal.appendChild(this.modalCloseBtn);
          this.modal.appendChild(this.modalBox);
        }).call(this), (function() {
          this._events = { clickCloseBtn: this.close.bind(this), clickOverlay: (function(t2) {
            var o2 = this.modal.offsetWidth - this.modal.clientWidth, e2 = t2.clientX >= this.modal.offsetWidth - 15, s = this.modal.scrollHeight !== this.modal.offsetHeight;
            if ("MacIntel" === navigator.platform && 0 == o2 && e2 && s) return;
            -1 !== this.opts.closeMethods.indexOf("overlay") && !function(t3, o3) {
              for (; (t3 = t3.parentElement) && !t3.classList.contains(o3); ) ;
              return t3;
            }(t2.target, "tingle-modal") && t2.clientX < this.modal.clientWidth && this.close();
          }).bind(this), resize: this.checkOverflow.bind(this), keyboardNav: (function(t2) {
            -1 !== this.opts.closeMethods.indexOf("escape") && 27 === t2.which && this.isOpen() && this.close();
          }).bind(this) }, -1 !== this.opts.closeMethods.indexOf("button") && this.modalCloseBtn.addEventListener("click", this._events.clickCloseBtn);
          this.modal.addEventListener("mousedown", this._events.clickOverlay), window.addEventListener("resize", this._events.resize), document.addEventListener("keydown", this._events.keyboardNav);
        }).call(this), document.body.appendChild(this.modal, document.body.firstChild), this.opts.footer && this.addFooter(), this;
      }, t.prototype._busy = function(t2) {
        o = t2;
      }, t.prototype._isBusy = function() {
        return o;
      }, t.prototype.destroy = function() {
        null !== this.modal && (this.isOpen() && this.close(true), (function() {
          -1 !== this.opts.closeMethods.indexOf("button") && this.modalCloseBtn.removeEventListener("click", this._events.clickCloseBtn);
          this.modal.removeEventListener("mousedown", this._events.clickOverlay), window.removeEventListener("resize", this._events.resize), document.removeEventListener("keydown", this._events.keyboardNav);
        }).call(this), this.modal.parentNode.removeChild(this.modal), this.modal = null);
      }, t.prototype.isOpen = function() {
        return !!this.modal.classList.contains("tingle-modal--visible");
      }, t.prototype.open = function() {
        if (!this._isBusy()) {
          this._busy(true);
          var t2 = this;
          return "function" == typeof t2.opts.beforeOpen && t2.opts.beforeOpen(), this.modal.style.removeProperty ? this.modal.style.removeProperty("display") : this.modal.style.removeAttribute("display"), document.getSelection().removeAllRanges(), this._scrollPosition = window.pageYOffset, document.body.classList.add("tingle-enabled"), document.body.style.top = -this._scrollPosition + "px", this.setStickyFooter(this.opts.stickyFooter), this.modal.classList.add("tingle-modal--visible"), "function" == typeof t2.opts.onOpen && t2.opts.onOpen.call(t2), t2._busy(false), this.checkOverflow(), this;
        }
      }, t.prototype.close = function(t2) {
        if (!this._isBusy()) {
          if (this._busy(true), false, "function" == typeof this.opts.beforeClose) {
            if (!this.opts.beforeClose.call(this)) return void this._busy(false);
          }
          document.body.classList.remove("tingle-enabled"), document.body.style.top = null, window.scrollTo({ top: this._scrollPosition, behavior: "instant" }), this.modal.classList.remove("tingle-modal--visible");
          var o2 = this;
          o2.modal.style.display = "none", "function" == typeof o2.opts.onClose && o2.opts.onClose.call(this), o2._busy(false);
        }
      }, t.prototype.setContent = function(t2) {
        return "string" == typeof t2 ? this.modalBoxContent.innerHTML = t2 : (this.modalBoxContent.innerHTML = "", this.modalBoxContent.appendChild(t2)), this.isOpen() && this.checkOverflow(), this;
      }, t.prototype.getContent = function() {
        return this.modalBoxContent;
      }, t.prototype.addFooter = function() {
        return (function() {
          this.modalBoxFooter = document.createElement("div"), this.modalBoxFooter.classList.add("tingle-modal-box__footer"), this.modalBox.appendChild(this.modalBoxFooter);
        }).call(this), this;
      }, t.prototype.setFooterContent = function(t2) {
        return this.modalBoxFooter.innerHTML = t2, this;
      }, t.prototype.getFooterContent = function() {
        return this.modalBoxFooter;
      }, t.prototype.setStickyFooter = function(t2) {
        return this.isOverflow() || (t2 = false), t2 ? this.modalBox.contains(this.modalBoxFooter) && (this.modalBox.removeChild(this.modalBoxFooter), this.modal.appendChild(this.modalBoxFooter), this.modalBoxFooter.classList.add("tingle-modal-box__footer--sticky"), e.call(this), this.modalBoxContent.style["padding-bottom"] = this.modalBoxFooter.clientHeight + 20 + "px") : this.modalBoxFooter && (this.modalBox.contains(this.modalBoxFooter) || (this.modal.removeChild(this.modalBoxFooter), this.modalBox.appendChild(this.modalBoxFooter), this.modalBoxFooter.style.width = "auto", this.modalBoxFooter.style.left = "", this.modalBoxContent.style["padding-bottom"] = "", this.modalBoxFooter.classList.remove("tingle-modal-box__footer--sticky"))), this;
      }, t.prototype.addFooterBtn = function(t2, o2, e2) {
        var s = document.createElement("button");
        return s.innerHTML = t2, s.addEventListener("click", e2), "string" == typeof o2 && o2.length && o2.split(" ").forEach(function(t3) {
          s.classList.add(t3);
        }), this.modalBoxFooter.appendChild(s), s;
      }, t.prototype.resize = function() {
        console.warn("Resize is deprecated and will be removed in version 1.0");
      }, t.prototype.isOverflow = function() {
        return window.innerHeight <= this.modalBox.clientHeight;
      }, t.prototype.checkOverflow = function() {
        this.modal.classList.contains("tingle-modal--visible") && (this.isOverflow() ? this.modal.classList.add("tingle-modal--overflow") : this.modal.classList.remove("tingle-modal--overflow"), !this.isOverflow() && this.opts.stickyFooter ? this.setStickyFooter(false) : this.isOverflow() && this.opts.stickyFooter && (e.call(this), this.setStickyFooter(true)));
      }, { modal: t };
    });
  }
});
export default require_tingle_min();
//# sourceMappingURL=tingle__js.js.map
